const { SlashCommandBuilder, EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, ChannelType, WebhookClient } = require("discord.js");
const axios = require("axios");
const User = require("../../database/models/User");
const { checkIsPremium } = require("../../helpers");

require("dotenv").config();

const ALLOWED_CATEGORIES = [
    "hass", "hmidriff", "pgif", "4k", "hentai", "holo", "hneko", "neko", "hkitsune", "kemonomimi",
    "anal", "hanal", "gonewild", "kanna", "ass", "pussy", "thigh", "hthigh", "coffee", "food",
    "paizuri", "tentacle", "boobs", "hboobs", "yaoi"
];

module.exports = {
    data: new SlashCommandBuilder()
        .setName("nsfw")
        .setDescription("kirim konten nsfw random (hanya di channel nsfw)")
        .addStringOption((option) =>
            option
                .setName("category")
                .setDescription("kategori konten")
                .setRequired(true)
                .addChoices(
                    { name: "hass", value: "hass" },
                    { name: "hmidriff", value: "hmidriff" },
                    { name: "pgif", value: "pgif" },
                    { name: "4k", value: "4k" },
                    { name: "hentai", value: "hentai" },
                    { name: "holo", value: "holo" },
                    { name: "hneko", value: "hneko" },
                    { name: "neko", value: "neko" },
                    { name: "hkitsune", value: "hkitsune" },
                    { name: "kemonomimi", value: "kemonomimi" },
                    { name: "anal", value: "anal" },
                    { name: "hanal", value: "hanal" },
                    { name: "gonewild", value: "gonewild" },
                    { name: "kanna", value: "kanna" },
                    { name: "ass", value: "ass" },
                    { name: "pussy", value: "pussy" },
                    { name: "thigh", value: "thigh" },
                    { name: "hthigh", value: "hthigh" },
                    { name: "coffee", value: "coffee" },
                    { name: "food", value: "food" },
                    { name: "paizuri", value: "paizuri" },
                    { name: "tentacle", value: "tentacle" },
                    { name: "boobs", value: "boobs" },
                    { name: "hboobs", value: "hboobs" },
                    { name: "yaoi", value: "yaoi" }
                )
        ),

    async execute(interaction) {
        const isPremium = await checkIsPremium(interaction.user.id);
        if (!isPremium) {
            const premiumEmbed = new EmbedBuilder()
                .setColor("Yellow")
                .setDescription("## Fitur Premium\nFitur ini cuma buat **premium** user yaa.\nHubungi owner buat langganan!")
                .setFooter({ text: "Upgrade ke premium untuk akses fitur ini.", iconURL: interaction.client.user.displayAvatarURL() });

            const row = new ActionRowBuilder().addComponents(
                new ButtonBuilder()
                    .setLabel("Upgrade Premium")
                    .setStyle(ButtonStyle.Link)
                    .setURL("https://kythia.my.id/premium") // Ganti URL sesuai kebutuhan
            );

            return interaction.editReply({
                embeds: [premiumEmbed],
                components: [row]
            });
        }

        await interaction.deferReply({ ephemeral: true });

        try {
            let user;

            if (interaction.guild) {
                const guildId = interaction.guild.id;
                const userId = interaction.user.id;

                user = await User.getCache({ userId, guildId });

                if (!user) {
                    user = await User.upsert({ userId, guildId });
                }
            }

            const category = interaction.options.getString("category");

            // Validate the category
            if (!ALLOWED_CATEGORIES.includes(category)) {
                return interaction.editReply({
                    content: "‚ùå | Kategori tidak valid. Silakan pilih kategori yang tersedia dari menu.",
                    ephemeral: true
                });
            }

            const fetchContent = async () => {
                const url = `https://nekobot.xyz/api/image?type=${category}`;
                const res = await axios.get(url);
                const data = res.data;

                if (!data || !data.message) throw new Error("gagal ambil data üò≠");
                return data.message;
            };

            const buildButton = (disabled = false) =>
                new ActionRowBuilder().addComponents(new ButtonBuilder().setCustomId(`refresh_${category}`).setLabel("üîÅ liat yang lain").setStyle(ButtonStyle.Primary).setDisabled(disabled));

            const sendContent = async () => {
                // Tambahkan 1 ke nsfwCount setiap kali request
                if (interaction.guild) {
                    user.nsfwCount = (user.nsfwCount || 0) + 1;
                    user.changed("nsfwCount", true);
                    await user.saveAndUpdateCache("userId");
                }
                const img = await fetchContent();

                const embed = new EmbedBuilder()
                    .setColor("Random")
                    .setTitle(`${category}`)
                    .setImage(img)
                    .setFooter({ text: `category: ${category}` });

                const row = buildButton();
                await interaction.editReply({
                    embeds: [embed],
                    components: [row],
                });
            };

            await sendContent();

            const waitForRefresh = async () => {
                try {
                    const i = await interaction.channel.awaitMessageComponent({
                        filter: (btnInt) => btnInt.customId === `refresh_${category}` && btnInt.user.id === interaction.user.id,
                        time: 60000,
                    });

                    await i.deferUpdate();
                    await sendContent();
                    await waitForRefresh(); // biar tombolnya bisa dipencet terus selama 1 menit
                } catch (err) {
                    const disabledRow = buildButton(true);
                    interaction.editReply({ components: [disabledRow] }).catch(() => { });
                }
            };

            await waitForRefresh();
        } catch (error) {
            console.error("Error during nsfw command execution:", error);
            // Send DM to owner about the error
            const webhookClient = new WebhookClient({ url: process.env.WEBHOOK_ERROR_LOGS });

            const errorEmbed = new EmbedBuilder().setColor("Red").setTitle(`> ‚ùå Error command /nsfw`).setDescription(`\`\`\`${error}\`\`\``).setFooter({ text: `Error dari server ${interaction.guild.name}` }).setTimestamp();

            // Kirim ke webhook
            webhookClient
                .send({
                    embeds: [errorEmbed],
                })
                .catch(console.error);
            return interaction.editReply({ content: "‚ùå | Terjadi kesalahan saat menjalankan perintah ini. Silakan coba lagi." });
        }
    },
};